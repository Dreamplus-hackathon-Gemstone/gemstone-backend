basePath: /
definitions:
  domain.Movie:
    properties:
      content_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      genre_id:
        type: integer
      id:
        type: integer
      maker_id:
        type: integer
      miners:
        items:
          $ref: '#/definitions/domain.User'
        type: array
      movie_uri:
        type: string
      thumbnail_uri:
        type: string
      updated_at:
        type: string
    type: object
  domain.Proposal:
    properties:
      content_id:
        type: string
      created_at:
        type: string
      deadline:
        type: string
      description:
        type: string
      document_uri:
        type: string
      estimated_production_time:
        type: string
      expected_release_year:
        type: string
      genre_id:
        type: integer
      id:
        type: integer
      maker_id:
        type: integer
      miners:
        items:
          $ref: '#/definitions/domain.User'
        type: array
      target_price:
        type: integer
      thumbnail_uri:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  domain.User:
    properties:
      account:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      movie:
        items:
          $ref: '#/definitions/domain.Movie'
        type: array
      movies:
        items:
          $ref: '#/definitions/domain.Movie'
        type: array
      name:
        type: string
      nickname:
        type: string
      password:
        type: string
      proposal:
        items:
          $ref: '#/definitions/domain.Proposal'
        type: array
      proposals:
        items:
          $ref: '#/definitions/domain.Proposal'
        type: array
      updated_at:
        type: string
    type: object
  global.FindManyMovieRes:
    properties:
      err: {}
      movies:
        items:
          $ref: '#/definitions/domain.Movie'
        type: array
      success:
        type: boolean
    type: object
  global.FindManyProposalRes:
    properties:
      proposals:
        items:
          $ref: '#/definitions/domain.Proposal'
        type: array
      success:
        type: boolean
    type: object
  global.FindMovieByGenreRes:
    properties:
      err: {}
      movies:
        items:
          $ref: '#/definitions/domain.Movie'
        type: array
      success:
        type: boolean
    type: object
  global.FindMovieRes:
    properties:
      err: {}
      movie:
        $ref: '#/definitions/domain.Movie'
      success:
        type: boolean
    type: object
  global.FindProposalByGenreRes:
    properties:
      err: {}
      proposals:
        items:
          $ref: '#/definitions/domain.Proposal'
        type: array
      success:
        type: boolean
    type: object
  global.FindProposalRes:
    properties:
      err: {}
      proposal:
        $ref: '#/definitions/domain.Proposal'
      success:
        type: boolean
    type: object
  global.LoginReq:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  global.LoginRes:
    properties:
      err: {}
      success:
        type: boolean
    type: object
  global.RegisterReq:
    properties:
      account:
        type: string
      email:
        type: string
      name:
        type: string
      nickname:
        type: string
      password:
        type: string
    type: object
  global.RegisterRes:
    properties:
      err: {}
      success:
        type: boolean
    type: object
  global.StoreGenreReq:
    properties:
      genre_type:
        type: string
    type: object
  global.StoreGenreRes:
    properties:
      err: {}
      success:
        type: boolean
    type: object
  global.StoreMovieReq:
    properties:
      content_id:
        type: string
      description:
        type: string
      genre_id:
        type: integer
      maker_id:
        type: integer
      movie_uri:
        type: string
      thumbnail_uri:
        type: string
    type: object
  global.StoreMovieRes:
    properties:
      err: {}
      success:
        type: boolean
    type: object
  global.StoreProposalReq:
    properties:
      content_id:
        type: string
      deadline:
        type: string
      description:
        type: string
      document_uri:
        type: string
      estimated_production_time:
        type: string
      expected_release_year:
        type: string
      genre_id:
        type: integer
      maker_id:
        type: integer
      target_price:
        type: integer
      thumbnail_uri:
        type: string
      title:
        type: string
    type: object
  global.StoreProposalRes:
    properties:
      err: {}
      success:
        type: boolean
    type: object
  global.UpdateNicknameReq:
    properties:
      id:
        type: integer
      nickname:
        type: string
    type: object
  global.UpdateNicknameRes:
    properties:
      err: {}
      success:
        type: boolean
    type: object
  global.VerifyNicknameRes:
    properties:
      err: {}
      success:
        type: boolean
    type: object
host: 127.0.0.1:8080
info:
  contact:
    email: ff.primrose@gmail.com
    name: Backend-Tech
  description: This is API Documentation Gemstone Backend
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Gemstone Backend
  version: "0.1"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: 로그인
      parameters:
      - description: Login Req
        in: body
        name: LoginReq
        required: true
        schema:
          $ref: '#/definitions/global.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.LoginRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/global.LoginRes'
      summary: Login
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: 회원가입
      parameters:
      - description: Register Req
        in: body
        name: RegisterReq
        required: true
        schema:
          $ref: '#/definitions/global.RegisterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.RegisterRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/global.RegisterRes'
      summary: Register
      tags:
      - auth
  /api/v1/auth/update:
    patch:
      consumes:
      - application/json
      description: 닉네임 수정
      parameters:
      - description: UpdateNickname Req
        in: body
        name: UpdateNicknameReq
        required: true
        schema:
          $ref: '#/definitions/global.UpdateNicknameReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.UpdateNicknameRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/global.UpdateNicknameRes'
      summary: UpdateNickname
      tags:
      - auth
  /api/v1/auth/verify/{nickname}:
    get:
      consumes:
      - application/json
      description: 존재하는 닉네임인지 확인.
      parameters:
      - description: VerifyNickname Req
        in: path
        name: nickname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.VerifyNicknameRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/global.VerifyNicknameRes'
      summary: Verify User Nickname
      tags:
      - auth
  /api/v1/genre/create:
    post:
      consumes:
      - application/json
      description: 테스트용 API 입니다.
      parameters:
      - description: Store Req
        in: body
        name: StoreGenreReq
        required: true
        schema:
          $ref: '#/definitions/global.StoreGenreReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.StoreGenreRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/global.StoreGenreRes'
      summary: Store Genre
      tags:
      - genre
  /api/v1/genre/movie:
    get:
      consumes:
      - application/json
      description: Genre 별 Movie 조회합니다. Offset 받을 수 있고, Limit 20으로 고정입니다.
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: string
      - description: GenreID
        in: query
        name: genreId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.FindMovieByGenreRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/global.FindMovieByGenreRes'
      summary: Find Movie By Genre ID
      tags:
      - genre
  /api/v1/genre/proposal:
    get:
      consumes:
      - application/json
      description: Genre 별 Proposal 조회합니다. Offset 받을 수 있고, Limit 20으로 고정입니다.
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: string
      - description: GenreID
        in: query
        name: genreId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.FindProposalByGenreRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/global.FindProposalByGenreRes'
      summary: Find Proposal By Genre ID
      tags:
      - genre
  /api/v1/movie:
    get:
      consumes:
      - application/json
      description: Movie 조회합니다. Offset 받을 수 있고, Limit 20으로 고정입니다.
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.FindManyMovieRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/global.FindManyMovieRes'
      summary: Find Many Movie
      tags:
      - movie
  /api/v1/movie/{cid}:
    get:
      consumes:
      - application/json
      description: Movie 세부 정보를 조회합니다.
      parameters:
      - description: ContentID
        in: path
        name: cid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.FindMovieRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/global.FindMovieRes'
      summary: Find Single Movie
      tags:
      - movie
  /api/v1/movie/create:
    post:
      consumes:
      - application/json
      description: 테스트용 API 입니다. Polling 혹은 Listen 시스템 제작 시 삭제 예정입니다.
      parameters:
      - description: Store Req
        in: body
        name: StoreMovieReq
        required: true
        schema:
          $ref: '#/definitions/global.StoreMovieReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.StoreMovieRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/global.StoreMovieRes'
      summary: Store Movie
      tags:
      - movie
  /api/v1/proposal:
    get:
      consumes:
      - application/json
      description: Proposal 조회합니다. Offset 받을 수 있고, Limit 20으로 고정입니다.
      parameters:
      - description: Offset
        in: query
        name: offset
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.FindManyProposalRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/global.FindManyProposalRes'
      summary: Find Many Proposal
      tags:
      - proposal
  /api/v1/proposal/{cid}:
    get:
      consumes:
      - application/json
      description: Proposal 세부 정보를 조회합니다.
      parameters:
      - description: ContentID
        in: path
        name: cid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.FindProposalRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/global.FindProposalRes'
      summary: Find Single Proposal
      tags:
      - proposal
  /api/v1/proposal/store:
    post:
      consumes:
      - application/json
      description: 테스트용 API 입니다. Polling 혹은 Listen 시스템 제작 시 삭제 예정입니다.
      parameters:
      - description: Store Req
        in: body
        name: StoreProposalReq
        required: true
        schema:
          $ref: '#/definitions/global.StoreProposalReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/global.StoreProposalRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/global.StoreProposalRes'
      summary: Store Proposal
      tags:
      - proposal
swagger: "2.0"
